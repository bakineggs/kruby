mod KRUBY-SYNTAX is
  --- see doc/syntax.html, which was saved from
  --- http://web.njit.edu/all_topics/Prog_Lang_Docs/html/ruby/yacc.html
  sorts Program Compstmt Stmt Expr Call Command Function Arg Primary WhenArgs
        Then Do BlockVar Mlhs MlhsItem Lhs Mrhs CallArgs Args Argdecl Arglist
        Singleton Assocs Assoc Variable Literal Term .
  sorts OpAsgn Symbol Fname Operation Varname Global String String2 HereDoc
        Regexp Identifier .

  subsort Compstmt < Program .

  sort CompstmtEndingWithExpr .
  subsort Stmt < CompstmtEndingWithExpr .
  op ___ : CompstmtEndingWithExpr Term Expr -> CompstmtEndingWithExpr .
  op __ : CompstmtEndingWithExpr Term -> Compstmt .
  subsort CompstmtEndingWithExpr < Compstmt .

  op _do|_|_end : Call BlockVar Compstmt -> Stmt .
  op _do||_end : Call Compstmt -> Stmt .
  op _do_end : Call Compstmt -> Stmt .
  op undef_ : Fname -> Stmt .
  op alias__ : Fname Fname -> Stmt .
  op _if_ : Stmt Expr -> Stmt .
  op _while_ : Stmt Expr -> Stmt .
  op _unless_ : Stmt Expr -> Stmt .
  op _until_ : Stmt Expr -> Stmt .
  op BEGIN`{_`} : Compstmt -> Stmt .
  op END`{_`} : Compstmt -> Stmt .
  op _=_do|_|_end : Lhs Command BlockVar Compstmt -> Stmt .
  op _=_do||_end : Lhs Command Compstmt -> Stmt .
  op _=_do_end : Lhs Command Compstmt -> Stmt .
  op _=_ : Lhs Command -> Stmt .
  subsort Expr < Stmt .

  op _=_ : Mlhs Mrhs -> Expr .
  op return_ : CallArgs -> Expr .
  op yield_ : CallArgs -> Expr .
  op _and_ : Expr Expr -> Expr .
  op _or_ : Expr Expr -> Expr .
  op not_ : Expr -> Expr .
  subsort Command < Expr .
  op !_ : Command -> Expr .
  subsort Arg < Expr .

  subsort Function < Call .
  subsort Command < Call .

  op __ : Operation CallArgs -> Command .
  op _.__ : Primary Operation CallArgs -> Command .
  op _::__ : Primary Operation CallArgs -> Command .
  op super_ : CallArgs -> Command .

  op _`(_`) : Operation CallArgs -> Function .
  op _`(`) : Operation -> Function .
  subsort Operation < Function .
  op _._`(_`) : Primary Operation CallArgs -> Function .
  op _._`(`) : Primary Operation -> Function .
  op _._ : Primary Operation -> Function .
  op _::_`(_`) : Primary Operation CallArgs -> Function .
  op _::_`(`) : Primary Operation -> Function .
  op _::_ : Primary Operation -> Function .
  op super`(_`) : CallArgs -> Function .
  op super`(`) : -> Function .
  op super : -> Function .

  op _=_ : Lhs Arg -> Arg .
  op ___ : Lhs OpAsgn Arg -> Arg .
  op _.._ : Arg Arg -> Arg .
  op _..._ : Arg Arg -> Arg .
  op _+_ : Arg Arg -> Arg .
  op _-_ : Arg Arg -> Arg .
  op _*_ : Arg Arg -> Arg .
  op _/_ : Arg Arg -> Arg .
  op _%_ : Arg Arg -> Arg .
  op _**_ : Arg Arg -> Arg .
  op +_ : Arg -> Arg .
  op -_ : Arg -> Arg .
  op _|_ : Arg Arg -> Arg .
  op _^_ : Arg Arg -> Arg .
  op _&_ : Arg Arg -> Arg .
  op _<=>_ : Arg Arg -> Arg .
  op _>_ : Arg Arg -> Arg .
  op _>=_ : Arg Arg -> Arg .
  op _<_ : Arg Arg -> Arg .
  op _<=_ : Arg Arg -> Arg .
  op _==_ : Arg Arg -> Arg .
  op _===_ : Arg Arg -> Arg .
  op _!=_ : Arg Arg -> Arg .
  op _=~_ : Arg Arg -> Arg .
  op _!~_ : Arg Arg -> Arg .
  op !_ : Arg -> Arg .
  op ~_ : Arg -> Arg .
  op _<<_ : Arg Arg -> Arg .
  op _>>_ : Arg Arg -> Arg .
  op _&&_ : Arg Arg -> Arg .
  op _||_ : Arg Arg -> Arg .
  op defined?_ : Arg -> Arg .
  subsort Primary < Arg .

  op `(_`) : Compstmt -> Primary .
  subsort Literal < Primary .
  subsort Variable < Primary .
  op _::_ : Primary Identifier -> Primary .
  op ::_ : Identifier -> Primary .
  op _`[_`] : Primary Args -> Primary .
  op _`[`] : Primary -> Primary .
  op `[_`,`] : Args -> Primary .
  op `[_`] : Args -> Primary .
  op `[`] : -> Primary .
  op `{_`,`} : Args -> Primary .
  op `{_`,`} : Assocs -> Primary .
  op `{_`} : Args -> Primary .
  op `{_`} : Assocs -> Primary .
  op `{`} : -> Primary .
  op return`(_`) : CallArgs -> Primary .
  op return`(`) : -> Primary .
  op return : -> Primary .
  op yield`(_`) : CallArgs -> Primary .
  op yield`(`) : -> Primary .
  op yield : -> Primary .
  op defined?`(_`) : Arg -> Primary .
  subsort Function < Primary .
  op _`{|_|_`} : Function BlockVar Compstmt -> Primary .
  op _`{||_`} : Function Compstmt -> Primary .
  op _`{_`} : Function Compstmt -> Primary .

  sort List{elsifBlock} .
  op elsif___ : Expr Then Compstmt -> List{elsifBlock} .
  op __ : List{elsifBlock} List{elsifBlock} -> List{elsifBlock} .
  op if____else_end : Expr Then Compstmt List{elsifBlock} Compstmt -> Primary .
  op if___else_end : Expr Then Compstmt Compstmt -> Primary .
  op if____end : Expr Then Compstmt List{elsifBlock} -> Primary .
  op if___end : Expr Then Compstmt -> Primary .

  op unless___else_end : Expr Then Compstmt Compstmt -> Primary .
  op unless___end : Expr Then Compstmt -> Primary .
  op while___end : Expr Do Compstmt -> Primary .
  op until___end : Expr Do Compstmt -> Primary .

  sort List{whenClause} .
  op when___ : WhenArgs Then Compstmt -> List{whenClause} .
  op __ : List{whenClause} List{whenClause} -> List{whenClause} .
  op case__else_end : Compstmt List{whenClause} Compstmt -> Primary .
  op case__end : Compstmt List{whenClause} -> Primary .

  op for_in___end : BlockVar Expr Do Compstmt -> Primary .

  sort List{rescueClause} .
  op rescue___ : Args Do Compstmt -> List{rescueClause} .
  op rescue__ : Do Compstmt -> List{rescueClause} .
  op __ : List{rescueClause} List{rescueClause} -> List{rescueClause} .
  op begin__else_ensure_end : Compstmt List{rescueClause} Compstmt Compstmt -> Primary .
  op begin__else_end : Compstmt List{rescueClause} Compstmt -> Primary .
  op begin__ensure_end : Compstmt List{rescueClause} Compstmt -> Primary .
  op begin__end : Compstmt List{rescueClause} -> Primary .

  op class_<__end : Identifier Identifier Compstmt -> Primary .
  op class__end : Identifier Compstmt -> Primary .
  op module__end : Identifier Compstmt -> Primary .
  op def___end : Fname Argdecl Compstmt -> Primary .
  op def_.___end : Singleton Fname Argdecl Compstmt -> Primary .
  op def_::___end : Singleton Fname Argdecl Compstmt -> Primary .

  op _`,*_ : Args Arg -> WhenArgs .
  subsort Args < WhenArgs .
  op *_ : Arg -> WhenArgs .

  subsort Term < Then .
  op then : -> Then .
  op _then : Term -> Then .

  subsort Term < Do .
  op do : -> Do .
  op _do : Term -> Do .

  subsort Lhs < BlockVar .
  subsort Mlhs < BlockVar .

  op _`,* : MlhsItem -> Mlhs .
  op _`, : MlhsItem -> Mlhs .
  op *_ : Lhs -> Mlhs .
  op _`,_ : MlhsItem Mlhs -> Mlhs .

  subsort Lhs < MlhsItem .
  op `(_`) : Mlhs -> MlhsItem .

  subsort Variable < Lhs .
  op _`[_`] : Primary Args -> Lhs .
  op _`[`] : Primary -> Lhs .
  op _._ : Primary Identifier -> Lhs .

  op _`,*_ : Args Arg -> Mrhs .
  subsort Args < Mrhs .
  op *_ : Arg -> Mrhs .

  subsort Args < CallArgs .
  op _`,_`,*_`,&_ : Args Assocs Arg Arg -> CallArgs .
  op _`,_`,*_ : Args Assocs Arg -> CallArgs .
  op _`,_`,&_ : Args Assocs Arg -> CallArgs .
  op _`,_ : Args Assocs -> CallArgs .
  op _`,*_`,&_ : Args Arg Arg -> CallArgs .
  op _`,*_ : Args Arg -> CallArgs .
  op _`,&_ : Args Arg -> CallArgs .
  op _`,*_`,&_ : Assocs Arg Arg -> CallArgs .
  op _`,*_ : Assocs Arg -> CallArgs .
  op _`,&_ : Assocs Arg -> CallArgs .
  subsort Assocs < CallArgs .
  op *_`,&_ : Arg Arg -> CallArgs .
  op *_ : Arg -> CallArgs .
  op &_ : Arg -> CallArgs .
  subsort Command < CallArgs .

  op _,_ : Args Arg -> Args .
  subsort Arg < Args .

  op `(_`) : Arglist -> Argdecl .
  op `(`) : -> Argdecl .
  op __ : Arglist Term -> Argdecl .
  subsort Term < Argdecl .

  sort beforeNewLine .
  subsort Argdecl Compstmt < beforeNewLine .

  op _`,*`,&_ : Identifier Identifier -> Arglist .
  op *_`,&_ : Identifier Identifier -> Arglist .
  op &_ : Identifier -> Arglist .
  op *_ : Identifier -> Arglist .
  op _`,_ : Identifier Arglist -> Arglist .
  subsort Identifier < Arglist .

  subsort Variable < Singleton .
  op `(_`) : Expr -> Singleton .

  subsort Assoc < Assocs .
  op _`,_ : Assocs Assoc -> Assocs .

  op _=>_ : Arg Arg -> Assoc .

  subsort Varname < Variable .
  op nil : -> Variable .
  op self : -> Variable .

  --- sort numeric . --- somehow make this be all numeric literals
  --- subsort numeric < Literal .
  op 0 : -> Literal .
  op 1 : -> Literal .
  op 2 : -> Literal .
  op 3 : -> Literal .
  op 4 : -> Literal .
  op 5 : -> Literal .
  op 6 : -> Literal .
  op 7 : -> Literal .
  op 8 : -> Literal .
  op 9 : -> Literal .
  subsort Symbol < Literal .
  subsort String < Literal .
  subsort String2 < Literal .
  subsort HereDoc < Literal .
  subsort Regexp < Literal .

  op ; : -> Term .
  --- op \n : -> Term .

  op += : -> OpAsgn .
  op -= : -> OpAsgn .
  op *= : -> OpAsgn .
  op /= : -> OpAsgn .
  op %= : -> OpAsgn .
  op **= : -> OpAsgn .
  op &= : -> OpAsgn .
  op |= : -> OpAsgn .
  op ^= : -> OpAsgn .
  op <<= : -> OpAsgn .
  op >>= : -> OpAsgn .
  op &&= : -> OpAsgn .
  op ||= : -> OpAsgn .

  op :_ : Fname -> Symbol .
  op :_ : Varname -> Symbol .

  subsort Identifier < Fname .
  op .. : -> Fname .
  op | : -> Fname .
  op ^ : -> Fname .
  op & : -> Fname .
  op <=> : -> Fname .
  op == : -> Fname .
  op === : -> Fname .
  op =~ : -> Fname .
  op > : -> Fname .
  op >= : -> Fname .
  op < : -> Fname .
  op <= : -> Fname .
  op + : -> Fname .
  op - : -> Fname .
  op * : -> Fname .
  op / : -> Fname .
  op % : -> Fname .
  op ** : -> Fname .
  op << : -> Fname .
  op >> : -> Fname .
  op ~ : -> Fname .
  op +@ : -> Fname .
  op -@ : -> Fname .
  op [] : -> Fname .
  op []= : -> Fname .

  subsort Identifier < Operation .
  op _! : Identifier -> Operation .
  op _? : Identifier -> Operation .

  subsort Global < Varname .
  op @_ : Identifier -> Varname .
  subsort Identifier < Varname .

  sort any_char .
  ops a b c d e f g h i j k l m n o p q r s t u v w x y z : -> any_char .

  sort any_char_seq . --- should be any_char*
  subsort any_char < any_char_seq .

  op $_ : Identifier -> Global .
  op $_ : any_char -> Global .
  op $-_ : any_char -> Global .

  op "_" : any_char_seq -> String .
  op '_' : any_char_seq -> String .
  --- op `_` : any_char_seq -> String .

  op %Q___ : any_char any_char_seq any_char -> String2 .
  op %q___ : any_char any_char_seq any_char -> String2 .
  op %x___ : any_char any_char_seq any_char -> String2 .

  op <<___ : Identifier any_char_seq Identifier -> HereDoc .
  op <<___ : String any_char_seq Identifier -> HereDoc .

  op /_/i : any_char_seq -> Regexp .
  op /_/o : any_char_seq -> Regexp .
  op /_/p : any_char_seq -> Regexp .
  op %r___ : any_char any_char_seq any_char -> Regexp .

  subsort any_char < Identifier .
endm
